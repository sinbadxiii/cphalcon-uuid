ARG_ENABLE("phalcon_uuid", "enable phalcon_uuid", "no");

if (PHP_PHALCON_UUID != "no") {
  EXTENSION("phalcon_uuid", "phalcon_uuid.c", null, "-I"+configure_module_dirname);
  ADD_SOURCES(configure_module_dirname + "/kernel", "main.c memory.c exception.c debug.c backtrace.c object.c array.c string.c fcall.c require.c file.c operators.c math.c concat.c variables.c filter.c iterator.c exit.c time.c", "phalcon_uuid");
  /* PCRE is always included on WIN32 */
  AC_DEFINE("ZEPHIR_USE_PHP_PCRE", 1, "Whether PHP pcre extension is present at compile time");
  if (PHP_JSON != "no") {
    ADD_EXTENSION_DEP("phalcon_uuid", "json");
    AC_DEFINE("ZEPHIR_USE_PHP_JSON", 1, "Whether PHP json extension is present at compile time");
  }
  
  ADD_SOURCES(configure_module_dirname + "/sparrow/encryption/crypt/padding", "padinterface.zep.c ansi.zep.c iso10126.zep.c isoiek.zep.c noop.zep.c pkcs7.zep.c space.zep.c zero.zep.c", "phalcon_uuid");
	ADD_SOURCES(configure_module_dirname + "/sparrow/encryption/security", "binarybase.zep.c uuid.zep.c exception.zep.c random.zep.c", "phalcon_uuid");
	ADD_SOURCES(configure_module_dirname + "/sparrow/encryption/security/uuid", "nodeproviderinterface.zep.c timebaseduidinterface.zep.c randomnodeprovider.zep.c sysnodeprovider.zep.c uuid1.zep.c uuid3.zep.c uuid4.zep.c uuid5.zep.c uuid6.zep.c", "phalcon_uuid");
	ADD_SOURCES(configure_module_dirname + "/sparrow/encryption/crypt", "cryptinterface.zep.c padfactory.zep.c", "phalcon_uuid");
	ADD_SOURCES(configure_module_dirname + "/sparrow/encryption/crypt/exception", "exception.zep.c mismatch.zep.c", "phalcon_uuid");
	ADD_SOURCES(configure_module_dirname + "/sparrow/encryption", "crypt.zep.c security.zep.c", "phalcon_uuid");
	ADD_SOURCES(configure_module_dirname + "/sparrow", "0__closure.zep.c", "phalcon_uuid");
  ADD_FLAG("CFLAGS_PHALCON_UUID", "/D ZEPHIR_RELEASE /Oi /Ot /Oy /Ob2 /Gs /GF /Gy /GL");
  ADD_FLAG("CFLAGS", "/D ZEPHIR_RELEASE /Oi /Ot /Oy /Ob2 /Gs /GF /Gy /GL");
  ADD_FLAG("LDFLAGS", "/LTCG");
}
